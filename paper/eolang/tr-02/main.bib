
@misc{noauthor_software_nodate,
	title = {Software {Design} {Patterns} - {GeeksforGeeks}},
	url = {https://www.geeksforgeeks.org/software-design-patterns/},
	urldate = {2021-07-23},
}

@misc{noauthor_design_2015,
	title = {Design {Patterns} {\textbar} {Set} 1 ({Introduction})},
	url = {https://www.geeksforgeeks.org/design-patterns-set-1-introduction/},
	abstract = {A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.},
	language = {en-us},
	urldate = {2021-07-23},
	journal = {GeeksforGeeks},
	month = aug,
	year = {2015},
	note = {Section: Design Pattern},
}

@misc{noauthor_design_nodate,
	title = {Design {Patterns} and {Refactoring}},
	url = {https://sourcemaking.com},
	abstract = {Design Patterns and Refactoring articles and guides. Design Patterns video tutorials for newbies. Simple descriptions and full source code examples in Java, C++, C\#, PHP and Delphi.},
	language = {en},
	urldate = {2021-07-23}
}

@inproceedings{streitferdt_searching_2005,
	title = {Searching design patterns in source code},
	volume = {2},
	doi = {10.1109/COMPSAC.2005.135},
	abstract = {Maintenance is a time consuming activity within software development and it requires a good understanding of the system in question. It is hard or even impossible to understand poorly documented legacy systems. Nevertheless, developers try to understand unknown object oriented systems by analysing the source code to recover the architecture of the system, which is a hard task since the dependencies between the classes cannot be recovered good enough. Here, the knowledge about design patterns can help developers to understand the underlying architecture faster. We analysed existing pattern search approaches and compared them by their recall and precision values, metrics out of the information retrieval domain. As a result we developed own pattern search algorithms for the 23 design pattern described by Gamma et al. (1995). This fast abstract briefly explains the basics of our pattern search and describes first results of the search algorithms developed as a Java plug-in for the Together IDE. This work was funded by the BMBF (2004) and is part of the InPULSE (2004) project.},
	booktitle = {29th {Annual} {International} {Computer} {Software} and {Applications} {Conference} ({COMPSAC}'05)},
	author = {Streitferdt, D. and Heller, C. and Philippow, I.},
	month = jul,
	year = {2005},
	note = {ISSN: 0730-3157},
	keywords = {Image processing, Software reusability, Application software, Bridges, Chromium, Computer applications, Design Patterns, Documentation, Pattern analysis, Pattern Search, Production facilities, Search Algorithms, System testing},
	pages = {33--34 Vol. 1}
}

@misc{noauthor_huston_nodate,
	title = {Huston {Design} {Patterns}},
	url = {http://www.vincehuston.org/dp/},
	urldate = {2021-07-25}
}

@inproceedings{schaffer_round-trip_1999,
	title = {Round-trip engineering with design patterns, {UML}, java and {C}++},
	doi = {10.1145/302405.302956},
	booktitle = {Proceedings of the 1999 {International} {Conference} on {Software} {Engineering} ({IEEE} {Cat}. {No}.{99CB37002})},
	author = {Schaffer, W. and Zundorf, A.},
	month = may,
	year = {1999},
	note = {ISSN: 0270-5257},
	keywords = {Java, Pattern recognition, Software systems, Code standards, Collaboration, Computer aided software engineering, Design engineering, Libraries, Qualifications, Unified modeling language},
	pages = {683--684}
}

@article{heer_software_2006,
	title = {Software {Design} {Patterns} for {Information} {Visualization}},
	volume = {12},
	issn = {1941-0506},
	doi = {10.1109/TVCG.2006.178},
	abstract = {Despite a diversity of software architectures supporting information visualization, it is often difficult to identify, evaluate, and re-apply the design solutions implemented within such frameworks. One popular and effective approach for addressing such difficulties is to capture successful solutions in design patterns, abstract descriptions of interacting software components that can be customized to solve design problems within a particular context. Based upon a review of existing frameworks and our own experiences building visualization software, we present a series of design patterns for the domain of information visualization. We discuss the structure, context of use, and interrelations of patterns spanning data representation, graphics, and interaction. By representing design knowledge in a reusable form, these patterns can be used to facilitate software design, implementation, and evaluation, and improve developer education and communication},
	number = {5},
	journal = {IEEE Transactions on Visualization and Computer Graphics},
	author = {Heer, Jeffrey and Agrawala, Maneesh},
	month = sep,
	year = {2006},
	note = {Conference Name: IEEE Transactions on Visualization and Computer Graphics},
	keywords = {software engineering, Software engineering, Application software, Computer languages, Programming profession, Software design, Buildings, Context, Data visualization, Design patterns, Graphics, information visualization, object-oriented programming, Software architecture},
	pages = {853--860}
}

@article{zhang_what_2012,
	title = {What {Do} {We} {Know} about the {Effectiveness} of {Software} {Design} {Patterns}?},
	volume = {38},
	issn = {1939-3520},
	doi = {10.1109/TSE.2011.79},
	abstract = {Context. Although research in software engineering largely seeks to improve the practices and products of software development, many practices are based upon codification of expert knowledge, often with little or no underpinning from objective empirical evidence. Software design patterns seek to codify expert knowledge to share experience about successful design structures. Objectives. To investigate how extensively the use of software design patterns has been subjected to empirical study and what evidence is available about how and when their use can provide an effective mechanism for knowledge transfer about design. Method. We conducted a systematic literature review in the form of a mapping study, searching the literature up to the end of 2009 to identify relevant primary studies about the use of the 23 patterns catalogued in the widely referenced book by the “Gang of Four.” These studies were then categorized according to the forms of study employed, the patterns that were studied, as well as the context within which the study took place. Results. Our searches identified 611 candidate papers. Applying our inclusion/exclusion criteria resulted in a final set of 10 papers that described 11 instances of “formal” experimental studies of object-oriented design patterns. We augmented our analysis by including seven “experience” reports that described application of patterns using less rigorous observational forms. We report and review the profiles of the empirical evidence for those patterns for which multiple studies exist. Conclusions. We could not identify firm support for any of the claims made for patterns in general, although there was some support for the usefulness of patterns in providing a framework for maintenance, and some qualitative indication that they do not help novices learn about design. For future studies we recommend that researchers use case studies that focus upon some key patterns, and seek to identify the impact that their use can have upon maintenance.},
	number = {5},
	journal = {IEEE Transactions on Software Engineering},
	author = {Zhang, Cheng and Budgen, David},
	month = sep,
	year = {2012},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	keywords = {Software engineering, Maintenance engineering, Software design, Design patterns, empirical software engineering, Search engines, systematic literature review, Systematics, Terminology},
	pages = {1213--1231}
}

@article{coplien_software_1998,
	title = {Software design patterns: common questions and answers},
	shorttitle = {Software design patterns},
	url = {https://www.semanticscholar.org/paper/Software-design-patterns%3A-common-questions-and-Coplien/9544fccfd09a9315b29ced5bc1e69f572114b7ec},
	language = {en},
	urldate = {2021-07-28},
	journal = {undefined},
	author = {Coplien, J.},
	year = {1998},
}

@inproceedings{tichy_catalogue_1997,
	title = {A catalogue of general-purpose software design patterns},
	doi = {10.1109/TOOLS.1997.654742},
	pages = {330--339}
}

@article{hussain_software_2017,
	title = {Software design patterns classification and selection using text categorization approach},
	volume = {58},
	issn = {1568-4946},
	url = {https://www.sciencedirect.com/science/article/pii/S1568494617302259},
	doi = {10.1016/j.asoc.2017.04.043},
	language = {en},
	urldate = {2021-07-28},
	journal = {Applied Soft Computing},
	author = {Hussain, Shahid and Keung, Jacky and Khan, Arif Ali},
	month = sep,
	year = {2017},
	keywords = {Deign patterns, Design problems, Feature selection, Supervised learning, Text categorization, Unsupervised learning},
	pages = {225--244}
}

@article{zimmer_relationships_1995,
	title = {Relationships between design patterns},
	url = {https://www.semanticscholar.org/paper/Relationships-between-design-patterns-Zimmer/b7fd68d166ca62fc05fe267b69ac78c279c6ea4f},
	abstract = {The catalogue of design patterns from [Gamm94] contains about twenty design patterns and their mutual relationships. In this paper, we organize these relationships into different categories and revise the design patterns and their relationships. We are then able to arrange the design patterns in different layers. The results simplify the understanding of the overall structure of the catalogue, thereby making it easier to classify other design patterns, and to apply these design patterns to software development.},
	language = {en},
	urldate = {2021-07-28},
	journal = {undefined},
	author = {Zimmer, W.},
	year = {1995},
	file = {Snapshot:C\:\\Users\\Joe\\Zotero\\storage\\G5HAB3UN\\b7fd68d166ca62fc05fe267b69ac78c279c6ea4f.html:text/html},
}

@book{kuchana_software_2004,
	address = {New York},
	title = {Software {Architecture} {Design} {Patterns} in {Java}},
	isbn = {978-0-429-20970-3},
	abstract = {Software engineering and computer science students need a resource that explains how to apply design patterns at the enterprise level, allowing them to design and implement systems of high stability and quality. Software Architecture Design Patterns in Java is a detailed explanation of how to apply design patterns and develop software architectures. It provides in-depth examples in Java, and guides students by detailing when, why, and how to use specific patterns. This textbook presents 42 design patterns, including 23 GoF patterns. Categories include: Basic, Creational, Collectional, Structural, Behavioral, and Concurrency, with multiple examples for each. The discussion of each pattern includes an example implemented in Java. The source code for all examples is found on a companion Web site. The author explains the content so that it is easy to understand, and each pattern discussion includes Practice Questions to aid instructors. The textbook concludes with a case study that pulls several patterns together to demonstrate how patterns are not applied in isolation, but collaborate within domains to solve complicated problems.},
	publisher = {Auerbach Publications},
	author = {Kuchana, Partha},
	month = apr,
	year = {2004},
	doi = {10.1201/9780203496213},
}

@inproceedings{aversano_empirical_2007,
	address = {New York, NY, USA},
	series = {{ESEC}-{FSE} '07},
	title = {An empirical study on the evolution of design patterns},
	isbn = {978-1-59593-811-4},
	url = {https://doi.org/10.1145/1287624.1287680},
	doi = {10.1145/1287624.1287680},
	abstract = {Design patterns are solutions to recurring design problems, conceived to increase benefits in terms of reuse, code quality and, above all, maintainability and resilience to changes. This paper presents results from an empirical study aimed at understanding the evolution of design patterns in three open source systems, namely JHotDraw, ArgoUML, and Eclipse-JDT. Specifically, the study analyzes how frequently patterns are modified, to what changes they undergo and what classes co-change with the patterns. Results show how patterns more suited to support the application purpose tend to change more frequently, and that different kind of changes have a different impact on co-changed classes and a different capability of making the system resilient to changes.},
	urldate = {2021-07-29},
	booktitle = {Proceedings of the the 6th joint meeting of the {European} software engineering conference and the {ACM} {SIGSOFT} symposium on {The} foundations of software engineering},
	publisher = {Association for Computing Machinery},
	author = {Aversano, Lerina and Canfora, Gerardo and Cerulo, Luigi and Del Grosso, Concettina and Di Penta, Massimiliano},
	month = sep,
	year = {2007},
	keywords = {empirical software engineering, design patterns, mining software repositories, software evolution},
	pages = {385--394},
}

@inproceedings{wendorff_assessment_2001,
	title = {Assessment of design patterns during software reengineering: lessons learned from a large commercial project},
	shorttitle = {Assessment of design patterns during software reengineering},
	doi = {10.1109/CSMR.2001.914971},
	abstract = {Design patterns have been eagerly adopted by software developers in recent years. There is ample evidence that patterns can have a beneficial impact on software quality, but in some cases patterns have been inappropriately applied due to a lack of experience. The paper reports on a large commercial project where the uncontrolled use of patterns has contributed to severe maintenance problems. As a result, a substantial reengineering effort was undertaken, that led to the identification of a number of inappropriately applied patterns. At first glance the elimination of these patterns appears to be desirable, but often they are tightly coupled to other software artefacts, so that their removal is economically not viable.},
	booktitle = {Proceedings {Fifth} {European} {Conference} on {Software} {Maintenance} and {Reengineering}},
	author = {Wendorff, P.},
	month = mar,
	year = {2001},
	keywords = {Software maintenance, Software quality, Programming profession, Software design, Software architecture, Atmosphere, Communication industry, Europe, Production, Telecommunications},
	pages = {77--84},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Joe\\Zotero\\storage\\8MX96GHN\\914971.html:text/html},
}

@article{hasheminejad_design_2012,
	series = {Special issue with selected papers from the 23rd {Brazilian} {Symposium} on {Software} {Engineering}},
	title = {Design patterns selection: {An} automatic two-phase method},
	volume = {85},
	issn = {0164-1212},
	shorttitle = {Design patterns selection},
	url = {https://www.sciencedirect.com/science/article/pii/S0164121211002317},
	doi = {10.1016/j.jss.2011.08.031},
	abstract = {Over many years of research and practices in software development, hundreds of software design patterns have been invented and published. Now, a question which naturally arises is how software developers select the right design patterns from all relevant patterns to solve design problems in the software design phase. To address this issue, in this paper, we propose a two-phase method to select a right design pattern. The proposed method is based on a text classification approach that aims to show an appropriate way to suggest the right design pattern(s) to developers for solving each given design problem. There are two advantages of the proposed method in comparison to previous works. First, there is no need for semi-formal specifications of design patterns and second, the suitable design patterns are suggested with their degree of similarity to the design problem. To evaluate the proposed method, we apply it on real problems and several case studies. The experimental results show that the proposed method is promising and effective.},
	language = {en},
	number = {2},
	urldate = {2021-07-29},
	journal = {Journal of Systems and Software},
	author = {Hasheminejad, Seyed Mohammad Hossein and Jalili, Saeed},
	month = feb,
	year = {2012},
	keywords = {Machine learning, Automatic pattern selection, Software design pattern, Text classification},
	pages = {408--424},
	file = {ScienceDirect Full Text PDF:C\:\\Users\\Joe\\Zotero\\storage\\XHYTJTML\\Hasheminejad and Jalili - 2012 - Design patterns selection An automatic two-phase .pdf:application/pdf},
}

@article{antoniol_object-oriented_2001,
	title = {Object-oriented design patterns recovery},
	volume = {59},
	issn = {0164-1212},
	url = {https://www.sciencedirect.com/science/article/pii/S0164121201000619},
	doi = {10.1016/S0164-1212(01)00061-9},
	abstract = {Object-Oriented (OO) design patterns are an emergent technology: they are reusable micro-architectures, high-level building blocks. A system which has been designed using well-known, documented and accepted design patterns is also likely to exhibit good properties such as modularity, separation of concerns and maintainability. While for forward engineering the benefits of using design patterns are clear, using reverse engineering technologies to discover instances of patterns in a software artifact (e.g., design or code) may help in several key areas, among which are program understanding, design-to-code traceability and quality assessment. This paper describes a conservative approach and experimental results, based on a multi-stage reduction strategy using OO software metrics and structural properties to extract structural design patterns from OO design or C++ code. To assess the effectiveness of the pattern recovery approach, a process and a portable tool suite written in Java, remotely accessible by means of any WEB browser, has been developed. The developed system and experimental results on 8 industrial software (design and code) and 200,000 lines of public domain C++ code are presented.},
	language = {en},
	number = {2},
	urldate = {2021-07-29},
	journal = {Journal of Systems and Software},
	author = {Antoniol, G. and Casazza, G. and Di Penta, M. and Fiutem, R.},
	month = nov,
	year = {2001},
	keywords = {OO design pattern recovery, OO redocumentation, Software metrics, Traceability},
	pages = {181--196},
	file = {ScienceDirect Full Text PDF:C\:\\Users\\Joe\\Zotero\\storage\\4HM8ABAV\\Antoniol et al. - 2001 - Object-oriented design patterns recovery.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\Joe\\Zotero\\storage\\72JKYK4X\\S0164121201000619.html:text/html},
}

@misc{noauthor_design_nodate-1,
	title = {Design {Pattern} - {Abstract} {Factory} {Pattern} - {Tutorialspoint}},
	url = {https://www.tutorialspoint.com/design_pattern/abstract_factory_pattern.htm},
	urldate = {2021-07-29},
	file = {Design Pattern - Abstract Factory Pattern - Tutorialspoint:C\:\\Users\\Joe\\Zotero\\storage\\S2R2C2YQ\\abstract_factory_pattern.html:text/html},
}

@article{khwaja_survey_2016,
	title = {Survey {On} {Software} {Design}-{Pattern} {Specification} {Languages}},
	volume = {49},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/2926966},
	doi = {10.1145/2926966},
	abstract = {A design pattern is a well-defined solution to a recurrent problem. Over the years, the number of patterns and domains of design patterns have expanded, as the patterns are the experiences of the experts of the domain captured in a higher-level abstraction. This led others to work on languages for design patterns to systematically document abstraction detailed in the design pattern rather than capture algorithms and data. These design-pattern specification languages come in different flavors, targeting different aspects of design patterns. Some design-pattern specification languages tried to capture the description of the design pattern in graphical or textual format, others tried to discover design patterns in code or design diagrams, and still other design-pattern specification languages have other objectives. However, so far, no effort has been made to compare these design-pattern specification languages and identify their strengths and weaknesses. This article provides a survey and a comparison between existing design-pattern specification languages using a design-pattern specification language evaluation framework. Analysis is done by grouping the design-pattern specification languages into different categories. In addition, a brief description is provided regarding the tools available for the design-pattern specification languages. Finally, we identify some open research issues that still need to be resolved.},
	number = {1},
	urldate = {2021-07-29},
	journal = {ACM Computing Surveys},
	author = {Khwaja, Salman and Alshayeb, Mohammad},
	month = jun,
	year = {2016},
	keywords = {Design pattern specification languages, domain specific languages},
	pages = {21:1--21:35},
	file = {Full Text PDF:C\:\\Users\\Joe\\Zotero\\storage\\997JRJ77\\Khwaja and Alshayeb - 2016 - Survey On Software Design-Pattern Specification La.pdf:application/pdf},
}

@article{bulajic_approach_2012,
	title = {An {Approach} to {Reducing} {Complexity} in {Abstract} {Factory} {Design} {Pattern}},
	volume = {3},
	number = {10},
	journal = {Journal of Emerging Trends in Computing and Information Sciences},
	author = {Bulajic, Aleksandar and Jovanovic, Slobodan},
	year = {2012},
	note = {Publisher: Citeseer},
}

@misc{noauthor_abstract_2017,
	title = {Abstract {Factory} {Pattern}},
	url = {https://www.geeksforgeeks.org/abstract-factory-pattern/},
	abstract = {A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.},
	language = {en-us},
	urldate = {2021-07-29},
	journal = {GeeksforGeeks},
	month = jul,
	year = {2017},
	note = {Section: Design Pattern},
	file = {Snapshot:C\:\\Users\\Joe\\Zotero\\storage\\GBYUDL4Q\\abstract-factory-pattern.html:text/html},
}

@misc{noauthor_abstract_nodate,
	title = {Abstract {Factory}},
	url = {https://refactoring.guru/design-patterns/abstract-factory},
	abstract = {Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their concrete classes.},
	language = {en},
	urldate = {2021-07-29},
	file = {Snapshot:C\:\\Users\\Joe\\Zotero\\storage\\8ZWQW255\\abstract-factory.html:text/html},
}

@misc{noauthor_design_2015-1,
	title = {Design {Patterns} {\textbar} {Set} 2 ({Factory} {Method})},
	url = {https://www.geeksforgeeks.org/design-patterns-set-2-factory-method/},
	abstract = {A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.},
	language = {en-us},
	urldate = {2021-07-29},
	journal = {GeeksforGeeks},
	month = aug,
	year = {2015},
	note = {Section: Design Pattern},
	file = {Snapshot:C\:\\Users\\Joe\\Zotero\\storage\\97MYK6ZT\\design-patterns-set-2-factory-method.html:text/html},
}

@misc{noauthor_factory_nodate,
	title = {Factory {Method}},
	url = {https://refactoring.guru/design-patterns/factory-method},
	abstract = {Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.},
	language = {en},
	urldate = {2021-07-29},
	file = {Snapshot:C\:\\Users\\Joe\\Zotero\\storage\\J5XZFLWI\\factory-method.html:text/html},
}

@misc{noauthor_design_nodate-2,
	title = {Design {Pattern} - {Factory} {Pattern} - {Tutorialspoint}},
	url = {https://www.tutorialspoint.com/design_pattern/factory_pattern.htm},
	urldate = {2021-07-29},
	file = {Design Pattern - Factory Pattern - Tutorialspoint:C\:\\Users\\Joe\\Zotero\\storage\\5MCEUYRB\\factory_pattern.html:text/html},
}

@misc{noauthor_design_nodate-3,
	title = {Design {Patterns}: {Factory} {Method} in {C}++},
	shorttitle = {Design {Patterns}},
	url = {https://refactoring.guru/design-patterns/factory-method/cpp/example},
	abstract = {Factory Method pattern in C++. Full code example in C++ with detailed comments and explanation. Factory method is a creational design pattern which solves the problem of creating product objects without specifying their concrete classes.},
	language = {en},
	urldate = {2021-07-29},
	file = {Snapshot:C\:\\Users\\Joe\\Zotero\\storage\\UJKWVKUJ\\example.html:text/html},
}

@misc{noauthor_builder_2017,
	title = {Builder {Design} {Pattern}},
	url = {https://www.geeksforgeeks.org/builder-design-pattern/},
	abstract = {A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.},
	language = {en-us},
	urldate = {2021-07-29},
	journal = {GeeksforGeeks},
	month = jul,
	year = {2017},
	note = {Section: Design Pattern},
}

@misc{noauthor_design_nodate-4,
	title = {Design {Patterns} - {Builder} {Pattern} - {Tutorialspoint}},
	url = {https://www.tutorialspoint.com/design_pattern/builder_pattern.htm},
	urldate = {2021-07-29},
	file = {Design Patterns - Builder Pattern - Tutorialspoint:C\:\\Users\\Joe\\Zotero\\storage\\2T795LAG\\builder_pattern.html:text/html},
}

@misc{noauthor_abstract_nodate-1,
	title = {Abstract {Factory} {Design} {Pattern}},
	url = {https://springframework.guru/gang-of-four-design-patterns/abstract-factory-design-pattern/},
	abstract = {A step by step tutorial looking at an example of the abstract factory design pattern written in Java.},
	language = {en-US},
	urldate = {2021-07-29},
	journal = {Spring Framework Guru},
	file = {Snapshot:C\:\\Users\\Joe\\Zotero\\storage\\DC59RTCC\\abstract-factory-design-pattern.html:text/html},
}

@misc{noauthor_singleton_nodate,
	title = {Singleton {Design} {Pattern} in {Java}},
	url = {https://springframework.guru/gang-of-four-design-patterns/singleton-design-pattern/},
	abstract = {A tutorial for beginners on singleton design pattern with the basic implementation and examples in Java programming language.},
	language = {en-US},
	urldate = {2021-07-29},
	journal = {Spring Framework Guru},
	file = {Snapshot:C\:\\Users\\Joe\\Zotero\\storage\\NELBQZXA\\singleton-design-pattern.html:text/html},
}

@misc{noauthor_design_nodate-5,
	title = {Design {Patterns} - {Adapter} {Pattern} - {Tutorialspoint}},
	url = {https://www.tutorialspoint.com/design_pattern/adapter_pattern.htm},
	urldate = {2021-08-01},
	file = {Design Patterns - Adapter Pattern - Tutorialspoint:C\:\\Users\\Joe\\Zotero\\storage\\NN7DZA7C\\adapter_pattern.html:text/html},
}

@article{schmidt_software_1996,
	title = {Software patterns},
	volume = {39},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/236156.236164},
	doi = {10.1145/236156.236164},
	number = {10},
	urldate = {2021-08-02},
	journal = {Communications of the ACM},
	author = {Schmidt, Douglas C. and Fayad, Mohamed and Johnson, Ralph E.},
	month = oct,
	year = {1996},
	pages = {37--39},
}

@inproceedings{pree_design_1997,
	address = {New York, NY, USA},
	series = {{ICSE} '97},
	title = {Design patterns for object-oriented software development (tutorial)},
	isbn = {978-0-89791-914-2},
	url = {https://doi.org/10.1145/253228.253810},
	doi = {10.1145/253228.253810},
	urldate = {2021-08-01},
	booktitle = {Proceedings of the 19th international conference on {Software} engineering},
	publisher = {Association for Computing Machinery},
	author = {Pree, Wolfgang and Sikora, Hermann},
	month = may,
	year = {1997},
	keywords = {design patterns, frameworks, object-oriented design, software architecture},
	pages = {663--664},
	file = {Full Text PDF:C\:\\Users\\Joe\\Zotero\\storage\\BGKPWYNR\\Pree and Sikora - 1997 - Design patterns for object-oriented software devel.pdf:application/pdf},
}

@article{riehle_understanding_1996,
	title = {Understanding and using patterns in software development},
	volume = {2},
	issn = {1096-9942},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291096-9942%281996%292%3A1%3C3%3A%3AAID-TAPO1%3E3.0.CO%3B2-%23},
	doi = {10.1002/(SICI)1096-9942(1996)2:1<3::AID-TAPO1>3.0.CO;2-#},
	abstract = {Patterns have shown to be an effective means of capturing and communicating software design experience. However, there is more to patterns than software design patterns: We believe that patterns work for software development on several levels. In this article we explore what we have come to understand as crucial aspects of the pattern concept, relate patterns to the different models built during software design, discuss pattern forms and how we think that patterns can form larger wholes like pattern handbooks. © 1996 John Wiley \& Sons, Inc.},
	language = {en},
	number = {1},
	urldate = {2021-08-02},
	journal = {Theory and Practice of Object Systems},
	author = {Riehle, Dirk and Züllighoven, Heinz},
	year = {1996},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/\%28SICI\%291096-9942\%281996\%292\%3A1\%3C3\%3A\%3AAID-TAPO1\%3E3.0.CO\%3B2-\%23},
	pages = {3--13},
	file = {Snapshot:C\:\\Users\\Joe\\Zotero\\storage\\2SDJ9K4I\\(SICI)1096-9942(1996)213AID-TAPO13.0.html:text/html},
}

@book{hahsler_quantitative_2003,
	title = {A {Quantitative} {Study} of the {Application} of {Design} {Patterns} in {Java}},
	abstract = {Using design patterns is a widely accepted method to improve software development. There are many benefits of the application of patterns claimed in the literature. The most cited claim is that design patterns can provide a common design vocabulary and therefore improve greatly communication between software designers. Most of the claims are supported by experiences reports of practitioners, but there is a lack of quantitative research concerning the actual application of design patterns and about the realization of the claimed benefits. In this paper we analyze the development process of over 1000 open source software projects using version control information. We explore this information to gain an insight into the differences of software development with and without design patterns. By analyzing these differences we provide evidence that design patterns are used for communication and that there is a significant difference between developers who use design patterns and who do not.},
	author = {Hahsler, Michael},
	month = feb,
	year = {2003},
	file = {Full Text PDF:C\:\\Users\\Joe\\Zotero\\storage\\3YCSPCLH\\Hahsler - 2003 - A Quantitative Study of the Application of Design .pdf:application/pdf},
}

@misc{noauthor_design_nodate-6,
	title = {Design {Patterns}: {Elements} of {Reusable} {Object}-{Oriented} {Software} [{Book}]},
	shorttitle = {Design {Patterns}},
	url = {https://www.oreilly.com/library/view/design-patterns-elements/0201633612/},
	abstract = {Capturing a wealth of experience about the design of object-oriented software, four top-notch designers present a catalog of simple and succinct solutions to commonly occurring design problems. Previously undocumented, these … - Selection from Design Patterns: Elements of Reusable Object-Oriented Software [Book]},
	language = {en},
	urldate = {2021-08-02},
	note = {ISBN: 9780201633610},
}

@article{vokac_defect_2004,
	title = {Defect {Frequency} and {Design} {Patterns}: {An} {Empirical} {Study} of {Industrial} {Code}},
	volume = {30},
	issn = {0098-5589},
	shorttitle = {Defect {Frequency} and {Design} {Patterns}},
	url = {https://doi.org/10.1109/TSE.2004.99},
	doi = {10.1109/TSE.2004.99},
	abstract = {Software "design patterns seek to package proven solutions to design problems in a form that makes it possible to find, adapt, and reuse them. A common claim is that a design based on properly applied patterns will have fewer defects than more ad hoc solutions. This case study analyzes the weekly evolution and maintenance of a large commercial product (C++, 500,000 LOC) over three years, comparing defect rates for classes that participated in selected design patterns to the code at large. We found that there are significant differences in defect rates among the patterns, ranging from 63 percent to 154 percent of the average rate. We developed a new set of tools able to extract design pattern information at a rate of 3{\textbackslash}times 10{\textasciicircum}6 lines of code per hour, with relatively high precision. Based on a qualitative analysis of the code and the nature of the patterns, we conclude that the Observer and Singleton patterns are correlated with larger code structures and, so, can serve as indicators of code that requires special attention. Conversely, code designed with the Factory pattern is more compact and possibly less closely coupled and, consequently, has lower defect numbers. The Template Method pattern was used in both simple and complex situations, leading to no clear tendency.},
	number = {12},
	urldate = {2021-08-09},
	journal = {IEEE Transactions on Software Engineering},
	author = {Vokac, Marek},
	month = dec,
	year = {2004},
	keywords = {case study, defect frequency, defects, Index Terms- Design patterns, industrial code, maintenance.},
	pages = {904--917},
}

@misc{1093892.2389691/8768226502,
	title = {Eo Design Patterns},
	url = {https://github.com/HSE-Eolang/eodesignpatterns},
	author = {HSE Team},
	organization = {HSE},
	language = {en},
	year = {2021},
	lastaccessed = {September 14, 2021},
	journal = {GitHub}
}
